{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPEUEddXjGm6KrYaQS23b56",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2403a52030-sketch/Lab-Assignment-Codes/blob/main/AI.lab%20assignment-6.3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 1:\n",
        "Use AI to complete a Student class with attributes and a method.\n",
        "• Check output\n",
        "• Analyze the code generated by AI tool"
      ],
      "metadata": {
        "id": "zyGfKfdS5-1k"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prompt:\n",
        "Create a Python class named Student with the following attributes: name, age, and student_id. Include a method called display_info that returns a formatted string showing the student's name, age, and ID.\""
      ],
      "metadata": {
        "id": "o_hX0IJs62FX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Student:\n",
        "    def __init__(self, name, age, student_id):\n",
        "        self.name = name\n",
        "        self.age = age\n",
        "        self.student_id = student_id\n",
        "\n",
        "    def display_info(self):\n",
        "        return f\"Name: {self.name}, Age: {self.age}, Student ID: {self.student_id}\""
      ],
      "metadata": {
        "id": "XWzSwM0q67ll"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explanation:\n",
        "\n",
        "class Student:: This line declares the beginning of the class definition.\n",
        "\n",
        "__init__(self, name, age, student_id):: This is the constructor method.\n",
        "\n",
        "It's automatically called when you create a new Student object.\n",
        "\n",
        "self refers to the instance of the class being created.\n",
        "\n",
        "name, age, and student_id are parameters that will be used to initialize the attributes of the Student object.\n",
        "\n",
        "Inside the method, self.name = name, self.age = age, and self.student_id = student_id assign the values passed as arguments to the corresponding attributes (characteristics) of the Student object.\n",
        "\n",
        "display_info(self):: This is a method of the Student class.\n",
        "\n",
        "It takes self as an argument, referring to the specific Student object the method is called on.\n",
        "\n",
        "return f\"Name: {self.name}, Age: {self.age}, Student ID: {self.student_id}\": This line creates and returns a formatted string (using an f-string) that includes the values of the name, age, and student_id attributes for that particular Student object.\n"
      ],
      "metadata": {
        "id": "ZYWKdeEa7E5B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 2:\n",
        "Prompt AI to complete a function that prints the first 10 multiples of a number using a\n",
        "loop.\n",
        "• Analyze the generated code\n",
        "• Ask AI to generate code using other controlled looping"
      ],
      "metadata": {
        "id": "iEWEdkhk7uQ6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "prompt:\n",
        "Write a Python function that prints the first 10 multiples of a given number using a loop."
      ],
      "metadata": {
        "id": "FqYJ6aSg78jw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def print_multiples(number):\n",
        "  \"\"\"Prints the first 10 multiples of a given number.\"\"\"\n",
        "  print(f\"Multiples of {number}:\")\n",
        "  for i in range(1, 11):\n",
        "    print(number * i)"
      ],
      "metadata": {
        "id": "DXLDzGEZ8HIo"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explanation:def print_multiples(number):: This line defines the function named print_multiples and indicates that it accepts a single parameter called number.\n",
        "\n",
        "The docstring \"\"\"Prints the first 10 multiples of a given number.\"\"\" explains what the function does.\n",
        "\n",
        "print(f\"Multiples of {number}:\"): This line prints a descriptive header to the console, indicating which number's multiples are about to be listed. The f\"\" denotes a formatted string literal, which allows you to embed the value of the number variable directly within the string.\n",
        "\n",
        "for i in range(1, 11):: This is a for loop, which is a type of controlled loop.\n",
        "range(1, 11) is a built-in Python function that generates a sequence of numbers starting from 1 and going up to (but not including) 11. This means the sequence will be 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10.\n",
        "\n",
        "The for loop iterates through each number in this sequence, assigning the current number to the variable i in each iteration.\n",
        "print(number * i): Inside the loop, this line performs the core calculation and printing.\n",
        "\n",
        "number * i calculates the product of the input number and the current value of i.\n",
        "\n",
        "print(...) displays this calculated product to the console"
      ],
      "metadata": {
        "id": "apznZBIR8c5Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 3:\n",
        "Ask AI to write nested if-elif-else conditionals to classify age groups.\n",
        "• Analyze the generated code\n",
        "• Ask AI to generate code using other conditional statements"
      ],
      "metadata": {
        "id": "CB6ridP2_PP-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "prompt:\n",
        "Write Python code using nested if-elif-else conditionals to classify a person's age into a group"
      ],
      "metadata": {
        "id": "7gAUfJ5M_bxs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "age = 18  # You can change this age to test different cases\n",
        "\n",
        "if age < 0:\n",
        "    print(\"Invalid age\")\n",
        "else:\n",
        "    if age < 13:\n",
        "        print(\"Child\")\n",
        "    elif age < 20:\n",
        "        print(\"Teenager\")\n",
        "    elif age < 60:\n",
        "        print(\"Adult\")\n",
        "    else:\n",
        "        print(\"Senior\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ykEj7tyr_0bJ",
        "outputId": "c31e782e-dd2d-46f4-ed75-6cabb18996da"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Teenager\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explanation:\n",
        "age = 18: This line initializes a variable age with the value 18. You can change this value to test how the code classifies different ages.\n",
        "if age < 0:: This is the outer if statement. It checks if the value of age is less than 0.\n",
        "\n",
        "print(\"Invalid age\"): If age is less than 0, this line is executed, printing \"Invalid age\" to the console. This handles cases where the age input might be a negative number, which is not a valid age.\n",
        "\n",
        "else:: If the condition in the outer if (age < 0) is false (meaning age is 0 or greater), the code inside this else block is executed. This block contains the nested conditional statements that classify valid ages.\n",
        "\n",
        "if age < 13:: This is the first nested if statement. It checks if the age (which we know is 0 or greater at this point) is less than 13.\n",
        "print(\"Child\"): If the age is between 0 and 12 (inclusive), this line is executed, printing \"Child\".\n",
        "\n",
        "elif age < 20:: This is an elif (else if) statement, checked if the previous if (age < 13) was false. It checks if the age is less than 20.\n",
        "print(\"Teenager\"): If the age is between 13 and 19 (inclusive), this line is executed, printing \"Teenager\".\n",
        "\n",
        "elif age < 60:: This is another elif statement, checked if the previous conditions were false. It checks if the age is less than 60.\n",
        "print(\"Adult\"): If the age is between 20 and 59 (inclusive), this line is executed, printing \"Adult\".\n",
        "\n",
        "else:: This is the final else block within the outer else. It's executed if none of the preceding if or elif conditions within this block were true.\n",
        "print(\"Senior\"): If the age is 60 or greater, this line is executed, printing \"Senior\"."
      ],
      "metadata": {
        "id": "LwMHQT76Ay4R"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 4:\n",
        "Generate a sum_to_n() function to calculate sum of first n numbers\n",
        "• Analyze the generated code\n",
        "• Get suggestions from AI with other controlled looping"
      ],
      "metadata": {
        "id": "ANc1Kjx_AGfl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "prompt:\n",
        "Write a Python function called sum_to_n(n) that calculates the sum of the first n natural numbers using a loop"
      ],
      "metadata": {
        "id": "j33_UlHRAZw1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sum_to_n(n):\n",
        "  \"\"\"Calculates the sum of the first n natural numbers using a loop.\"\"\"\n",
        "  if n < 0:\n",
        "    return \"Input must be a non-negative integer\"\n",
        "  else:\n",
        "    total_sum = 0\n",
        "    for i in range(1, n + 1):\n",
        "      total_sum += i\n",
        "    return total_sum"
      ],
      "metadata": {
        "id": "am1PJPhxBFkd"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explanation:\n",
        "def sum_to_n(n):: This line defines the function named sum_to_n and indicates that it accepts a single parameter called n. The docstring explains what the function does.\n",
        "if n < 0:: This is a conditional statement that checks if the input number n is less than 0.\n",
        "return \"Input must be a non-negative integer\": If n is negative, the function returns an error message because the concept of summing the first 'n' natural numbers usually applies to non-negative integers.\n",
        "else:: If the condition n < 0 is false (meaning n is 0 or positive), the code in the else block is executed.\n",
        "total_sum = 0: This line initializes a variable total_sum to 0. This variable will store the running sum of the numbers.\n",
        "for i in range(1, n + 1):: This is a for loop that iterates from 1 up to and including n.\n",
        "range(1, n + 1) generates a sequence of numbers starting from 1 and going up to (but not including) n + 1. This means the sequence will be 1, 2, 3, ..., n.\n",
        "The loop iterates through each number in this sequence, assigning the current number to the variable i.\n",
        "total_sum += i: Inside the loop, this line adds the current value of i to the total_sum. This accumulates the sum of the numbers from 1 to n.\n",
        "return total_sum: After the loop has finished iterating through all the numbers from 1 to n, the function returns the final calculated total_sum."
      ],
      "metadata": {
        "id": "L5PpaIOBB1FJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 5:\n",
        "Use AI to build a BankAccount class with deposit, withdraw, and balance methods.\n",
        "• Analyze the generated code\n",
        "• Add comments and explain code"
      ],
      "metadata": {
        "id": "ABP3_WZ8CEHj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prompt:\n",
        "Write a Python class named BankAccount with methods to deposit money, withdraw money, and check balance."
      ],
      "metadata": {
        "id": "QoYEqFglCNT8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class BankAccount:\n",
        "    def __init__(self, account_holder, initial_balance=0):\n",
        "        self.account_holder = account_holder\n",
        "        self.balance = initial_balance\n",
        "\n",
        "    def deposit(self, amount):\n",
        "        if amount > 0:\n",
        "            self.balance += amount\n",
        "            print(f\"Deposited: ${amount}. New balance: ${self.balance}\")\n",
        "        else:\n",
        "            print(\"Deposit amount must be positive.\")\n",
        "\n",
        "    def withdraw(self, amount):\n",
        "        if amount > 0:\n",
        "            if self.balance >= amount:\n",
        "                self.balance -= amount\n",
        "                print(f\"Withdrew: ${amount}. New balance: ${self.balance}\")\n",
        "            else:\n",
        "                print(\"Insufficient funds.\")\n",
        "        else:\n",
        "            print(\"Withdrawal amount must be positive.\")\n",
        "\n",
        "    def get_balance(self):\n",
        "        return self.balance"
      ],
      "metadata": {
        "id": "C4VcuO_1CXO6"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explanation:\n",
        "class BankAccount:: This line defines a class named BankAccount.\n",
        "__init__(self, account_holder, initial_balance=0):: This is the constructor method.\n",
        "self: Refers to the instance of the class.\n",
        "account_holder: An argument to store the name of the account holder.\n",
        "initial_balance=0: An optional argument for the initial balance, defaulting to 0 if not provided.\n",
        "self.account_holder = account_holder: Assigns the account_holder argument to the account_holder attribute of the object.\n",
        "self.balance = initial_balance: Assigns the initial_balance argument to the balance attribute of the object.\n",
        "deposit(self, amount):: This method handles deposits.\n",
        "self: Refers to the instance.\n",
        "amount: The amount to deposit.\n",
        "if amount > 0:: Checks if the deposit amount is positive.\n",
        "self.balance += amount: Adds the positive amount to the balance.\n",
        "print(...): Prints a confirmation message.\n",
        "else:: If the amount is not positive, it prints an error message.\n",
        "withdraw(self, amount):: This method handles withdrawals.\n",
        "self: Refers to the instance.\n",
        "amount: The amount to withdraw.\n",
        "if amount > 0:: Checks if the withdrawal amount is positive.\n",
        "if self.balance >= amount:: Checks if there are sufficient funds.\n",
        "self.balance -= amount: Subtracts the withdrawal amount from the balance.\n",
        "print(...): Prints a confirmation message.\n",
        "else:: If insufficient funds, prints an error message.\n",
        "else:: If the withdrawal amount is not positive, prints an error message.\n",
        "get_balance(self):: This method returns the current balance.\n",
        "self: Refers to the instance.\n",
        "return self.balance: Returns the value of the balance attribute."
      ],
      "metadata": {
        "id": "WdluToreCtHt"
      }
    }
  ]
}